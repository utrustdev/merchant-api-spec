swagger: "2.0"
schemes:
  - https
host: merchants.api.utrust.com/
basePath: api/
x-servers:
  - url: https://merchants.api.utrust.com/api/
    description: Production server (live)
  - url: https://merchants.api.sandbox-utrust.com/api/
    description: Sandbox server (test)
info:
  x-logo:
    url: "https://user-images.githubusercontent.com/1558992/70794685-228a2480-1d96-11ea-8198-1569bf0c872e.png"
    backgroundColor: "#FAFAFA"
  title: Utrust API
  version: 1.1.0
  contact:
    email: integrations@utrust.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  description: |
    The Utrust API is organized around
    [REST](https://en.wikipedia.org/wiki/Representational_state_transfer),
    particularly using the [JSON:API spec](https://jsonapi.org/). Our API has
    resource-oriented URLs, returns JSON responses and uses standard HTTP
    response codes and verbs.

    # Introduction

    The Utrust API is divided into two separate use cases.  

    The [Stores API](#tag/Store-Order) which uses an API Key as authentication and provides
    endpoints to be used by plugins or other integrations with your store.
    In addition to the API Key we provide a Webhooks Secret used to sign the webhook responses
    to the payments progress. That Webhook Secret is essential to ensure the payment progress is not 
    spoofed by a third party.

    The [Merchants API](#tag/Session) is comprised by all the endpoints we use to power our
    Merchant dashboard. They are public so that you can integrate with
    your own system as you please, but we do recommend using our dashboard as
    much as possible, as we'll be sure to keep it up to date and as useful as
    possible.

    # Authentication

    Both APIs have different methods of authentication, which are explained below:
    <!-- ReDoc-Inject: <security-definitions> -->

externalDocs:
  description: Check out the repo
  url: "https://github.com/utrustdev/merchant-api-spec"
produces:
  - application/vnd.api+json
consumes:
  - application/vnd.api+json
tags:
  - name: Store Order
  - name: Webhooks
    description: |
      To sync with the progress of Order payment we use webhooks. To ensure that the webhooks are 
      comming from Utrust and not some unauthorized third party we create a signature or EVERY request
      the signature is included in the webhook payload and can be reconstructed for verification.
      You can use our [libraries](https://docs.utrust.com/#section/Libraries) for this or you code it 
      yourself manually.

      ### Events

      Events are our way of letting you know when something interesting happens
      with an order. For example, when a payment for an order is confirmed, we
      create a `ORDER.PAYMENT.RECEIVED` event.

      We communicate these events via a webhooks system, which are sent to the
      URL you provide us as the callback URL for the order. 

      List of events:

      * `ORDER.PAYMENT.RECEIVED` - Triggered when the payment is confirmed
      * `ORDER.PAYMENT.CANCELLED` - Triggered when the payment is cancelled

      #### Verifying events

      Since these events are sent from us to you, you might want to verify that
      they were not tampered with in the process. To allow for that, we sign
      every event with HMAC SHA256, using the client secret for your store as the
      signing key. You can then use the client id to verify it.

      We sort the payload for each event, so that we can guarantee it will
      always be the same. To do this on your side you should first remove the
      signature field, and then recursively order each field alphabetically by
      its name. For example:

      ```
      payload = {
        "event_type":"ORDER.PAYMENT.RECEIVED",
        "resource":{
          "reference":"1400012634",
          "amount":"10.8200",
          "currency":"EUR",
        },
        "signature":"5ef8a5994e917c14479b31f690d4d2a023dfcc6059081504e3087977b21580ab",
        "state":"completed"
      }

      ordered_payload = {
        "event_type":"ORDER.PAYMENT.RECEIVED",
        "resource":{
          "amount":"10.8200",
          "currency":"EUR",
          "reference":"1400012634"
        },
        "state":"completed"
      }
      ```

      Once it's ordered, you should join it into a string, sign it and then base16
      encode it:

      ```
      joined_payload =
      “event_typeORDER.PAYMENT.RECEIVEDresourceamount10.8200resourcecurrencyEURresourcereference1400012634statecompleted"
      signed_payload = :crypto.hmac(:sha256, secret, joined_payload)
      signature = Base.encode16(signed_payload, case: :lower)
      ```

      You can see an example of the signature validation function in PHP [here.](https://github.com/utrustdev/utrust-php/blob/e400f219b73cced5b184f2f15eded3c8654dce3c/src/Webhook/Event.php#L75)

      #### Response and retries

      We will be expecting your response to our webhook to be:
      * If everything went well → status: **200 OK**; with no body or a valid JSON (e.g. `{ success: true }`);
      * If signature or body request is invalid → status: **400 Bad Request**;
      * If something else went wrong → status: **500 Internal Server Error**;


      If our HTTP request to your system fails, we will retry 15 times with an exponential back off. It follows the 
      Fibonacci sequence pattern, therefore, the last event will be 987 minutes after the first one (that's 16h27).

  - name: Session
  - name: Account
  - name: Order
  - name: Account MultiFactor
    description: |
      The multifactor activation has two steps:
      1. Generating and retrieving a secret with [this endpoint.](#operation/multiFactorGenerateSecret)
      2. Using the authenticator code (generated with the secret) activate it with [this endpoint.](#operation/multiFactorActivate)
  - name: Account Password
  - name: Account Settings
  - name: Refund
x-tagGroups:
  - name: Stores API
    tags:
      - Store Order
      - Webhooks
  - name: Merchants API
    tags:
      - Session
      - Account
      - Account MultiFactor
      - Account Password
      - Account Settings
      - Order
      - Refund
securityDefinitions:
  Stores_API_Authentication:
    type: apiKey
    in: header
    name: "Authorization: Bearer <api-key>"
    description: |
      To generate the API key for the authentication of requests, head to the Merchant Dashboard 
      ([sandbox](https://merchants.sandbox-utrust.com) or [production](https://merchants.utrust.com)) and in the
      Organizations tab view and generate your keys.
      The generated key will have a `u_live` or `u_test` prefix in order to be distinguished between 
      our sandbox and production environments, respectively.
      You will also see the Webhooks secret which you will need to [verify the events signature](#tag/Webhooks), 
      save it for later.

      For usage of the Stores API you will need to include the API key on every request in
      an `Authorization` header with the following format `Bearer: <api-key>`
  Merchants_API_Authentication:
    type: apiKey
    in: header
    name: "Authorization: Bearer <token>"
    description: |
      For the Merchant API we use a JSON Web Tokens (JWT) authentication. We call our resource
      for generating JWT [Sessions](#tag/Session).
      The generated token can be used to Authenticate your Merchant API requests using the familiar 
      `Authorization` header with `Bearer: <token>`
security:
  - Merchants_API_Authentication: []
  - Stores_API_Authentication: []
headers:
  cursorParam:
    in: query
    name: cursor
    description: Specifies where to start fetching data from
    type: string
  limitParam:
    in: query
    name: limit
    description: The maximum number of results to return per call
    type: integer
    minimum: 1
    maximum: 100
    default: 100
