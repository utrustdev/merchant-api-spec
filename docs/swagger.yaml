swagger: '2.0'
schemes:
  - https
host: merchants.api.utrust.com/api
basePath: /
info:
  description: |
    The UTRUST API is organized around
    [REST](https://en.wikipedia.org/wiki/Representational_state_transfer),
    particularly using the [JSON:API spec](https://jsonapi.org/). Our API has
    resource-oriented URLs, returns JSON responses and uses standard HTTP
    response codes and verbs.

    # Authentication

    UTRUST offers JSON Web Tokens (JWT) authentication. We call our resource
    for generating JWT [Sessions](#tag/Session) or [Store
    Sessions](#tag/Store-Session) for the Stores.

    <!-- ReDoc-Inject: <security-definitions> -->

    You can find the credentials needed in the merchant dashboard, in the
    Organization settings. In order to have access to it you must first sign up
    at https://merchants.utrust.com/onboarding/sign-up.

    These credentials will grant many privileges within your UTRUST
    account, so be sure to keep them secure! Do not share them in publicly
    accessible areas such as GitHUB, client-side code, and so on.

    All API requests must be made over HTTPS and with authentication.

    # Stores vs Merchant API

    The UTRUST API is divided into two separate use cases, the [Stores
    API](#tag/Store-Order) which provides endpoints to be used by plugins or
    other integrations with your store.

    The Merchants API is comprised by all the endpoints we use to power our
    Merchant dashboard. You make them public so that you can integrate with
    your own system as you please, but we do recommend using our dashboard as
    much as possible, as we'll be sure to keep it up to date and as useful as
    possible.
  version: 1.0.0
  title: UTRUST Merchant API
  contact:
    email: apiteam@utrust.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://s2.coinmarketcap.com/static/img/coins/200x200/2320.png'
externalDocs:
  description: Check out the repo
  url: 'https://github.com/utrustdev/merchant-api-spec'
produces:
  - application/vnd.api+json
consumes:
  - application/vnd.api+json
tags:
  - name: Store Order
  - name: Store Session
  - name: Session
  - name: Account
  - name: Order
  - name: MultiFactor
  - name: Account Settings
  - name: Account Password
  - name: Refunds
x-tagGroups:
  - name: Stores API
    tags:
      - Store Order
      - Store Session
  - name: Authentication
    tags:
      - Session
      - Account
      - MultiFactor
  - name: Orders
    tags:
      - Order
  - name: Settings
    tags:
      - Account Settings
      - Account Password
  - name: Payments
    tags:
      - Refunds
securityDefinitions:
  JWT:
    type: apiKey
    in: header
    name: 'Authorization: Bearer <token>'
    description: You can create a JSON Web Token (JWT) via our Sessions resource
security:
  - JWT: []
paths:
  /multi_factor_auth/tfa_activation:
    post:
      tags:
        - MultiFactor
      summary: Requests the activation for a user
      operationId: multiFactorActivate
      parameters:
        - in: body
          name: tfa_activation
          required: true
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - tfa_activation
                  attributes:
                    type: object
                    properties:
                      code:
                        type: string
                        example: '123456'
      responses:
        '200':
          description: Multi factor activated
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - tfa_activation
                  id:
                    allOf:
                      - $ref: '#/definitions/UUID'
                    description: The user uuid
  '/multi_factor_auth/tfa_activation/{user_id}':
    delete:
      tags:
        - MultiFactor
      summary: Requests the deactivation for a user
      operationId: multiFactorDeactivate
      parameters:
        - in: path
          name: user_id
          type: string
          format: UUID
          required: true
        - in: body
          name: tfa_activation
          required: true
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - tfa_activation
                  attributes:
                    type: object
                    properties:
                      code:
                        type: string
                        example: '123456'
      responses:
        '200':
          description: Multi factor activated
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - tfa_activation
                  id:
                    allOf:
                      - $ref: '#/definitions/UUID'
                    description: The user uuid
  /multi_factor_auth/tfa_secret:
    post:
      tags:
        - MultiFactor
      summary: Requests the secret for a user
      description: 'Requests the generation of a Time-based One Time Password (secret) for the user, including a URI to be included in a QR code'
      operationId: multiFactorGenerateSecret
      parameters:
        - in: body
          name: tfa_secret
          required: true
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - tfa_secret
      responses:
        '200':
          description: Secret generated
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - tfa_secret
                  id:
                    allOf:
                      - $ref: '#/definitions/UUID'
                    description: The user uuid
                  attributes:
                    type: object
                    properties:
                      secret:
                        type: string
                        example: 407c1e588e224ce48ff4caf2e2525742
                      key_uri:
                        type: string
                        description: URI to be embedded into a QR code
                        example: otpauth%3A%2F%2Ftotp%2FUTRUST%3Abraeden1983%40lueilwitz.org%3Fissuer%3DUTRUST%26secret%3DGQYDOYZRMU2TQODFGIZDIY3FGQ4GMZRUMNQWMMTFGI2TENJXGQZA
                      recovery_code:
                        type: string
                        description: A code to be given to user so that they can later recover the account if the secret is lost
                        example: c2f7a15dc34c4c1f8818094741c6aa78
  '/multi_factor_auth/tfa_secret/{user_id}':
    post:
      tags:
        - MultiFactor
      summary: Regenerate all the 2FA credentials
      description: To be used when the user can't generate a 2FA code. Will disable 2FA and request re-activation.
      operationId: multiFactorRegenerateSecret
      parameters:
        - in: body
          name: tfa_secret
          required: true
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - tfa_secret
                  id:
                    allOf:
                      - $ref: '#/definitions/UUID'
                    description: The user uuid
                  attributes:
                    type: object
                    properties:
                      recovery_code:
                        type: string
                        example: c2f7a15dc34c4c1f8818094741c6aa78
      responses:
        '200':
          description: Secret generated
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - tfa_secret
                  id:
                    allOf:
                      - $ref: '#/definitions/UUID'
                    description: The user uuid
                  attributes:
                    type: object
                    properties:
                      secret:
                        type: string
                        example: 407c1e588e224ce48ff4caf2e2525742
                      key_uri:
                        type: string
                        description: URI to be embedded into a QR code
                        example: otpauth%3A%2F%2Ftotp%2FUTRUST%3Abraeden1983%40lueilwitz.org%3Fissuer%3DUTRUST%26secret%3DGQYDOYZRMU2TQODFGIZDIY3FGQ4GMZRUMNQWMMTFGI2TENJXGQZA
                      recovery_code:
                        type: string
                        description: A code to be given to user so that they can later recover the account if the secret is lost
                        example: c2f7a15dc34c4c1f8818094741c6aa78
  /orders:
    get:
      tags:
        - Order
      summary: List orders for all the merchant's stores
      operationId: listOrders
      parameters:
        - in: query
          name: cursor
          description: Specifies where to start fetching data from
          type: string
        - in: query
          name: limit
          description: The maximum number of results to return per call
          type: integer
          minimum: 1
          maximum: 100
          default: 100
        - in: query
          name: include
          type: string
          enum:
            - payment
      responses:
        '200':
          description: List of orders for merchant
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  - $ref: '#/definitions/Order'
  '/orders/{order_id}':
    get:
      tags:
        - Order
      summary: Show order details
      operationId: showOrderDetails
      parameters:
        - in: path
          name: order_id
          type: string
          format: UUID
          required: true
        - in: query
          name: include
          type: string
          enum:
            - payments
      responses:
        '200':
          description: Order details
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Order'
        '404':
          description: Order not found
          schema:
            $ref: '#/definitions/Error'
  '/payments/{payment_id}/refund':
    get:
      tags:
        - Refunds
      summary: 'Returns a refund for the given payment, if there is one'
      operationId: getPaymentRefund
      parameters:
        - in: path
          name: payment_id
          type: string
          format: UUID
          required: true
      responses:
        '200':
          description: Refund details
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Refund'
        '404':
          description: Refund not found
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Refunds
      summary: Creates a refund proposal
      description: 'As a merchant you can only propose refunds, it''s ultimately the buyer''s decision to either accept or reject it (within a reasonable timeframe). There can only be one active proposal at any given time, if you create a proposal and there was already one, the new one will take it''s place.'
      operationId: createPaymentRefundProposal
      parameters:
        - in: body
          name: refund proposal
          description: Refund proposal to send to the buyer
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - refunds
                  id:
                    description: Refund id
                    allOf:
                      - $ref: '#/definitions/UUID'
                  attributes:
                    type: object
                    properties:
                      amount:
                        type: string
                      currency:
                        type: string
                        example: USD
                      reason:
                        type: string
                    required:
                      - amount
                      - currency
  /settings/account:
    get:
      tags:
        - Account Settings
      summary: Fetch the current account settings
      operationId: getAccountSettings
      responses:
        '200':
          description: Account settings
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - orders_redirect
                  id:
                    allOf:
                      - $ref: '#/definitions/UUID'
                  attributes:
                    $ref: '#/definitions/AccountSettings'
    patch:
      tags:
        - Account Settings
      summary: Update the account settings
      operationId: updateAccountSettings
      parameters:
        - in: body
          name: settings
          description: The settings to be updated
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - account_settings
                  id:
                    description: The current user id
                    allOf:
                      - $ref: '#/definitions/UUID'
                  attributes:
                    type: object
                    properties:
                      first_name:
                        type: string
                      last_name:
                        type: string
                    required:
                      - first_name
                      - last_name
      responses:
        '200':
          description: Account settings
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - orders_redirect
                  id:
                    allOf:
                      - $ref: '#/definitions/UUID'
                  attributes:
                    $ref: '#/definitions/AccountSettings'
  /settings/password:
    patch:
      tags:
        - Account Password
      summary: Update the account password
      operationId: updateAccountPassword
      parameters:
        - in: body
          name: account-password
          description: The password to be updated
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - password
                  id:
                    description: The current user id
                    allOf:
                      - $ref: '#/definitions/UUID'
                  attributes:
                    type: object
                    properties:
                      password:
                        type: string
                      new_password:
                        type: string
                      tfa_token:
                        type: string
                        description: Token is required if 2FA has been activated
                        example: '123456'
                    required:
                      - password
                      - new_password
      responses:
        '200':
          description: Password updated
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - password
                  id:
                    allOf:
                      - $ref: '#/definitions/UUID'
                  attributes:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Password successfully changed.
  /sign_in:
    post:
      tags:
        - Session
      summary: Generate a valid token for this session
      description: |
        Use your credentials to generate a JWT that you will
        need to perform any authenticated request on the API
      operationId: generateToken
      parameters:
        - in: body
          name: credentials
          description: Your UTRUST credentials
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - session
                  attributes:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                      password:
                        type: string
                    required:
                      - email
                      - password
      responses:
        '200':
          description: Token generated
          schema:
            $ref: '#/definitions/Token'
        '401':
          description: Invalid credentials
          schema:
            $ref: '#/definitions/Error'
  /sign_out:
    delete:
      tags:
        - Session
      summary: Revokes the token for the current session
      operationId: revokeToken
      responses:
        '200':
          description: Token revoked
  /sign_up:
    post:
      tags:
        - Account
      summary: Creates an account
      description: |
        Provide details in order to create a merchant account
      operationId: createAccount
      parameters:
        - in: body
          name: credentials
          description: Credentials you choose to be used on your account
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - account
                  attributes:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                      password:
                        type: string
                      organization_name:
                        type: string
                      first_name:
                        type: string
                      last_name:
                        type: string
                    required:
                      - email
                      - password
                      - organization_name
                      - first_name
                      - last_name
      responses:
        '200':
          description: Account created
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  id:
                    $ref: '#/definitions/UUID'
                  type:
                    type: string
                    enum:
                      - merchants
                  attributes:
                    type: object
        '400':
          description: Invalid credentials
          schema:
            $ref: '#/definitions/Error'
  /stores/orders:
    post:
      tags:
        - Store Order
      summary: Create an order
      description: |
        Create a new order for payment processing. Returns a url to a page where a
        buyer can fulfill the payment for that order.

        ### Events

        Events are our way of letting you know when something interesting happens
        with an order. For example, when a payment for an order is confirmed, we
        create a `ORDER.PAYMENT.RECEIVED` event.

        We communicate these events via a webhooks system, which are sent to the
        URL you provide us as the callback URL for the order. We will retry to send
        you the event for 10 times or until we get a response with a 200 status
        code. If none of these happens, the event notification will be lost.

        List of events:

        * `ORDER.PAYMENT.RECEIVED` - Triggered when the payment is confirmed

        #### Verifying events

        Since these events are sent from us to you, you might want to verify that
        they were not tampered with in the process. To allow for that, we sign
        every event with HMAC SHA256, using the client secret for your store as the
        signing key. You can then use the client id to verify it.

        We order the payload for each event, so that we can guarantee it will
        always be the same. To do this on your side you should first remove the
        signature field, and then recursively order each field alphabetically by
        its name. For example:

        ```
        payload = {
          "event_type":"ORDER.PAYMENT.RECEIVED",
          "resource":{
            "reference":"1400012634"
            "amount":"10.8200",
            "currency":"EUR",
          },
          "signature":"5ef8a5994e917c14479b31f690d4d2a023dfcc6059081504e3087977b21580ab",
          "state":"completed"
        }

        ordered_payload = {
          "event_type":"ORDER.PAYMENT.RECEIVED",
          "resource":{
            "amount":"10.8200",
            "currency":"EUR",
            "reference":"1400012634"
          },
          "state":"completed"
        }
        ```

        Once it's ordered, you should join it into a string, sign it and then base16 encode it:

        ```
        joined_payload = “event_typeORDER.PAYMENT.RECEIVEDresourceamount10.8200resourcecurrencyEURresourcereference1400012634statecompleted"

        signed_payload  = :crypto.hmac(:sha256, secret, joined_payload)
        signature = Base.encode16(signed_payload, case: :lower)
        ```
      operationId: createOrder
      parameters:
        - in: body
          name: order
          description: The order information
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - orders
                  attributes:
                    type: object
                    properties:
                      order:
                        $ref: '#/definitions/OrderInput'
                      customer:
                        $ref: '#/definitions/Customer'
                    required:
                      - order
                      - customer
      responses:
        '201':
          description: Order created
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - orders_redirect
                  id:
                    allOf:
                      - $ref: '#/definitions/UUID'
                  attributes:
                    type: object
                    properties:
                      redirect_url:
                        type: string
                        format: URL
                        example: 'https://buyers.utrust.com?uuid=some-uuid'
  /stores/session:
    post:
      tags:
        - Store Session
      summary: Generate a valid token for this session
      description: |
        Use your credentials to generate a JWT that you will
        need to perform any authenticated request on the API
      operationId: generateStoreToken
      parameters:
        - in: body
          name: credentials
          description: Your UTRUST credentials
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - session
                  attributes:
                    type: object
                    properties:
                      client_id:
                        type: string
                      client_secret:
                        type: string
                    required:
                      - client_id
                      - client_secret
      responses:
        '200':
          description: Token generated
          schema:
            $ref: '#/definitions/Token'
        '401':
          description: Invalid credentials
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Store Session
      summary: Revokes the token for the current session
      operationId: revokeStoreToken
      responses:
        '200':
          description: Token revoked
definitions:
  AccountSettings:
    type: object
    properties:
      email:
        type: string
        format: email
        example: john@example.com
      first_name:
        type: string
        example: John
      last_name:
        type: string
        example: Doe
      tfa_active:
        type: boolean
        description: True if two factor authentication has been set up
  Amount:
    type: object
    properties:
      total:
        type: string
        format: decimal
        example: '40.00'
      currency:
        type: string
        example: USD
      details:
        type: object
        description: |
          Additional details about the amount
        properties:
          subtotal:
            type: string
            format: decimal
            example: '39.00'
          shipping:
            type: string
            format: decimal
            example: '1.00'
          tax:
            type: string
            format: decimal
            example: '1.00'
    required:
      - total
      - currency
  Currency:
    type: object
    properties:
      value:
        type: string
        format: decimal
        example: '40.00'
      currency:
        type: string
        example: USD
  Customer:
    type: object
    properties:
      first_name:
        type: string
        example: John
      last_name:
        type: string
        example: Doe
      email:
        type: string
        format: email
        example: john@example.com
      address1:
        type: string
        example: 118 Main St
      address2:
        type: string
        example: 7th Floor
      city:
        type: string
        example: New York
      state:
        type: string
        example: New York
      postcode:
        type: string
        example: '10001'
      country:
        type: string
        example: US
    required:
      - first_name
      - last_name
      - email
      - country
  Error:
    type: object
    properties:
      errors:
        type: array
        items:
          type: object
          properties:
            detail:
              type: string
              description: Human readable explanation of the problem
              example: Explanation of the problem
  OrderInput:
    type: object
    properties:
      reference:
        type: string
        example: order-1
      amount:
        allOf:
          - $ref: '#/definitions/Amount'
        example:
          total: '113.00'
          currency: USD
          details:
            subtotal: '98.00'
            handling_fee: '2.00'
            shipping: '10.00'
            tax: '3.00'
      return_urls:
        type: object
        description: |
          If not using the express checkout flow you can specify a URL
          to redirect the user when the payment is done
        properties:
          return_url:
            type: string
            description: URL to redirect the user in case of everything going well
            format: url
            example: 'http://example.com/return'
          cancel_url:
            type: string
            description: URL to redirect the user in case of something going wrong
            format: url
            example: 'http://example.com/cancel'
          callback_url:
            type: string
            description: URL to POST information to when the payment is confirmed
            format: url
            example: 'http://example.com/callback'
        required:
          - return_url
      line_items:
        type: array
        items:
          $ref: '#/definitions/LineItem'
    required:
      - reference
      - amount
      - return_urls
      - line_items
  LineItem:
    type: object
    properties:
      sku:
        type: string
      name:
        type: string
      price:
        type: string
        example: '100'
      currency:
        type: string
        example: USD
      quantity:
        type: integer
        minimum: 1
        example: 1
    required:
      - sku
      - name
      - price
      - currency
      - quantity
  Order:
    type: object
    properties:
      id:
        allOf:
          - $ref: '#/definitions/UUID'
      type:
        type: string
        enum:
          - orders
      attributes:
        type: object
        properties:
          status:
            type: string
            enum:
              - pending
              - paid
          created_at:
            type: string
            format: date-time
            example: '2018-04-26T12:48:11.954503'
          total_amount:
            allOf:
              - $ref: '#/definitions/Currency'
          customer:
            $ref: '#/definitions/Customer'
          merchant_uuid:
            allOf:
              - $ref: '#/definitions/UUID'
          items:
            type: array
            items:
              $ref: '#/definitions/LineItem'
  PartnerFeeDetails:
    type: object
    properties:
      receiver:
        type: string
        enum:
          - utrust
        example: utrust
      amount:
        type: object
        properties:
          total:
            type: string
            format: decimal
            example: '0.000943775'
          currency:
            type: string
            example: ETH
  Payment:
    type: object
    properties:
      id:
        allOf:
          - $ref: '#/definitions/UUID'
      type:
        type: string
        enum:
          - payments
      attributes:
        type: object
        properties:
          state:
            type: string
            enum:
              - confirmed
              - rejected
              - expired
          source:
            type: object
            properties:
              type:
                type: string
                enum:
                  - order
              id:
                allOf:
                  - $ref: '#/definitions/UUID'
          payer:
            type: object
            properties:
              payment_method:
                type: string
                enum:
                  - utrust
                  - blockchain
          total_amount:
            allOf:
              - $ref: '#/definitions/Currency'
          transactions:
            type: array
            items:
              $ref: '#/definitions/PaymentTransaction'
  PaymentTransaction:
    type: object
    properties:
      payee:
        type: string
        enum:
          - merchant
        example: merchant
      received_amount:
        $ref: '#/definitions/Amount'
      paid_amount:
        allOf:
          - $ref: '#/definitions/Amount'
        example:
          total: '0.094377463'
          currency: ETH
          details:
            subtotal: '0.092018026'
            handling_fee: '0.002359437'
      partner_fee_details:
        $ref: '#/definitions/PartnerFeeDetails'
      exchange_rate:
        type: string
        example: '423.83000000'
      description:
        type: string
        example: The payment transaction description.
  Refund:
    type: object
    properties:
      id:
        description: Refund id
        allOf:
          - $ref: '#/definitions/UUID'
      type:
        type: string
        enum:
          - refunds
      attributes:
        type: object
        properties:
          requested_amount:
            type: string
            description: Value that was proposed
          requested_currency:
            type: string
            description: Currency in which the refund was proposed (this will match the currency used by the store at the time of purchase)
          status:
            type: string
            enum:
              - proposed
              - accepted
              - rejected
              - complete
          reason:
            type: string
            description: Reason provided by the merchant to propose a refund
  Token:
    type: object
    properties:
      data:
        type: object
        properties:
          type:
            type: string
            enum:
              - session
          id:
            type: string
            format: JWT
          attributes:
            type: object
            properties:
              token:
                type: string
                format: JWT
  UUID:
    type: string
    format: UUID
    example: c8d65cc2-0c82-429a-95ea-3f65011fc2cc
